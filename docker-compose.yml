version: '3.8'

services:
  asterdex-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: asterdex-trading-bot
    restart: unless-stopped
    
    # Environment variables (optional, can override config.json)
    environment:
      - TZ=Asia/Shanghai
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # === Option 1: Use config.json file (Recommended) ===
      # Mount config.json below and leave these commented
      
      # === Option 2: Use environment variables ===
      # Uncomment below to use .env file instead of config.json
      
      # AsterDEX API (REQUIRED)
      # - ASTERDEX_USER=${ASTERDEX_USER}
      # - ASTERDEX_SIGNER=${ASTERDEX_SIGNER}
      # - ASTERDEX_PRIVATE_KEY=${ASTERDEX_PRIVATE_KEY}
      # - ASTERDEX_API_BASE_URL=${ASTERDEX_API_BASE_URL:-https://fapi.asterdex.com}
      
      # AI Configuration (OPTIONAL)
      # - AI_ENABLED=${AI_ENABLED:-true}
      # - AI_PROVIDER=${AI_PROVIDER:-deepseek}
      
      # DeepSeek AI
      # - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      # - DEEPSEEK_API_BASE_URL=${DEEPSEEK_API_BASE_URL:-https://api.deepseek.com}
      # - DEEPSEEK_MODEL=${DEEPSEEK_MODEL:-deepseek-chat}
      
      # Grok AI (Alternative)
      # - GROK_API_KEY=${GROK_API_KEY}
      # - GROK_API_BASE_URL=${GROK_API_BASE_URL:-https://api.x.ai/v1}
      # - GROK_MODEL=${GROK_MODEL:-grok-beta}
    
    # Volume mounts
    volumes:
      # Mount configuration file (REQUIRED)
      - ./config/config.json:/app/config/config.json:ro
      
      # Mount logs directory (persistent logs)
      - ./logs:/app/logs
      
      # Optional: Mount custom strategy files
      # - ./custom_strategies:/app/src/strategies/custom:ro
    
    # Network configuration
    networks:
      - bot-network
    
    # Resource limits (adjust based on your needs)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  bot-network:
    driver: bridge

# Optional: Add volume for persistent data
# volumes:
#   bot-logs:
#     driver: local
